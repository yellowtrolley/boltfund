// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pg.tm470.boltfund.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pg.tm470.boltfund.domain.RatingDataOnDemand;
import pg.tm470.boltfund.domain.Route;
import pg.tm470.boltfund.domain.RouteDataOnDemand;
import pg.tm470.boltfund.domain.SectorDataOnDemand;

privileged aspect RouteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RouteDataOnDemand: @Component;
    
    private Random RouteDataOnDemand.rnd = new SecureRandom();
    
    private List<Route> RouteDataOnDemand.data;
    
    @Autowired
    RatingDataOnDemand RouteDataOnDemand.ratingDataOnDemand;
    
    @Autowired
    SectorDataOnDemand RouteDataOnDemand.sectorDataOnDemand;
    
    public Route RouteDataOnDemand.getNewTransientRoute(int index) {
        Route obj = new Route();
        setBolts(obj, index);
        setDateCreated(obj, index);
        setDateRebolted(obj, index);
        setDateSubmitted(obj, index);
        setDescription(obj, index);
        setLength(obj, index);
        setName(obj, index);
        setNote(obj, index);
        return obj;
    }
    
    public void RouteDataOnDemand.setBolts(Route obj, int index) {
        Integer bolts = new Integer(index);
        obj.setBolts(bolts);
    }
    
    public void RouteDataOnDemand.setDateCreated(Route obj, int index) {
        Date dateCreated = new Date(new Date().getTime() - 10000000L);
        obj.setDateCreated(dateCreated);
    }
    
    public void RouteDataOnDemand.setDateRebolted(Route obj, int index) {
        Date dateRebolted = new Date(new Date().getTime() - 10000000L);
        obj.setDateRebolted(dateRebolted);
    }
    
    public void RouteDataOnDemand.setDateSubmitted(Route obj, int index) {
        Date dateSubmitted = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateSubmitted(dateSubmitted);
    }
    
    public void RouteDataOnDemand.setDescription(Route obj, int index) {
        String description = "description_" + index;
        if (description.length() > 2000) {
            description = description.substring(0, 2000);
        }
        obj.setDescription(description);
    }
    
    public void RouteDataOnDemand.setLength(Route obj, int index) {
        Integer length = new Integer(index);
        obj.setLength(length);
    }
    
    public void RouteDataOnDemand.setName(Route obj, int index) {
        String name = "name_" + index;
        if (name.length() > 25) {
            name = name.substring(0, 25);
        }
        obj.setName(name);
    }
    
    public void RouteDataOnDemand.setNote(Route obj, int index) {
        String note = "note_" + index;
        if (note.length() > 1000) {
            note = note.substring(0, 1000);
        }
        obj.setNote(note);
    }
    
    public Route RouteDataOnDemand.getSpecificRoute(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Route obj = data.get(index);
        Long id = obj.getId();
        return Route.findRoute(id);
    }
    
    public Route RouteDataOnDemand.getRandomRoute() {
        init();
        Route obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Route.findRoute(id);
    }
    
    public boolean RouteDataOnDemand.modifyRoute(Route obj) {
        return false;
    }
    
    public void RouteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Route.findRouteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Route' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Route>();
        for (int i = 0; i < 10; i++) {
            Route obj = getNewTransientRoute(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
