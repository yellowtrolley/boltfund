// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pg.tm470.boltfund.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pg.tm470.boltfund.domain.Crag;
import pg.tm470.boltfund.domain.CragDataOnDemand;
import pg.tm470.boltfund.domain.Location;
import pg.tm470.boltfund.domain.RatingDataOnDemand;

privileged aspect CragDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CragDataOnDemand: @Component;
    
    private Random CragDataOnDemand.rnd = new SecureRandom();
    
    private List<Crag> CragDataOnDemand.data;
    
    @Autowired
    RatingDataOnDemand CragDataOnDemand.ratingDataOnDemand;
    
    public Crag CragDataOnDemand.getNewTransientCrag(int index) {
        Crag obj = new Crag();
        setAccess(obj, index);
        setDescription(obj, index);
        setHeight(obj, index);
        setLocation(obj, index);
        setName(obj, index);
        setNotes(obj, index);
        setRockType(obj, index);
        return obj;
    }
    
    public void CragDataOnDemand.setAccess(Crag obj, int index) {
        String access = "access_" + index;
        if (access.length() > 5000) {
            access = access.substring(0, 5000);
        }
        obj.setAccess(access);
    }
    
    public void CragDataOnDemand.setDescription(Crag obj, int index) {
        String description = "description_" + index;
        if (description.length() > 5000) {
            description = description.substring(0, 5000);
        }
        obj.setDescription(description);
    }
    
    public void CragDataOnDemand.setHeight(Crag obj, int index) {
        Integer height = new Integer(index);
        obj.setHeight(height);
    }
    
    public void CragDataOnDemand.setLocation(Crag obj, int index) {
        Location location = null;
        obj.setLocation(location);
    }
    
    public void CragDataOnDemand.setName(Crag obj, int index) {
        String name = "name_" + index;
        if (name.length() > 20) {
            name = name.substring(0, 20);
        }
        obj.setName(name);
    }
    
    public void CragDataOnDemand.setNotes(Crag obj, int index) {
        String notes = "notes_" + index;
        if (notes.length() > 2000) {
            notes = notes.substring(0, 2000);
        }
        obj.setNotes(notes);
    }
    
    public void CragDataOnDemand.setRockType(Crag obj, int index) {
        String rockType = "rockType_" + index;
        if (rockType.length() > 20) {
            rockType = rockType.substring(0, 20);
        }
        obj.setRockType(rockType);
    }
    
    public Crag CragDataOnDemand.getSpecificCrag(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Crag obj = data.get(index);
        Long id = obj.getId();
        return Crag.findCrag(id);
    }
    
    public Crag CragDataOnDemand.getRandomCrag() {
        init();
        Crag obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Crag.findCrag(id);
    }
    
    public boolean CragDataOnDemand.modifyCrag(Crag obj) {
        return false;
    }
    
    public void CragDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Crag.findCragEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Crag' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Crag>();
        for (int i = 0; i < 10; i++) {
            Crag obj = getNewTransientCrag(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
